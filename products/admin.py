from django.contrib import admin
from django.utils.html import format_html
from django.urls import reverse
from django.utils.safestring import mark_safe
from .models import Product, HoodCategory, UploadLog, BulkUpload, Order, OrderItem, OrderStatusHistory, OrderSyncLog

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∞–¥–º–∏–Ω–∫—É –¥–ª—è –∑–∞–∫–∞–∑–æ–≤
from .admin_orders import *


@admin.register(HoodCategory)
class HoodCategoryAdmin(admin.ModelAdmin):
    """–ê–¥–º–∏–Ω–∫–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π Hood.de"""
    list_display = ['name', 'hood_id', 'level', 'parent', 'is_active', 'created_at']
    list_filter = ['level', 'is_active', 'created_at']
    search_fields = ['name', 'hood_id', 'path']
    ordering = ['path']
    readonly_fields = ['created_at', 'updated_at']
    
    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('hood_id', 'name', 'path', 'level', 'parent', 'is_active')
        }),
        ('–°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('created_at', 'updated_at'),
            'classes': ('collapse',)
        }),
    )


@admin.register(Product)
class ProductAdmin(admin.ModelAdmin):
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–¥–º–∏–Ω–∫–∞ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π –ø–æ–ª–µ–π Hood.de API"""
    
    list_display = ['title', 'manufacturer', 'price', 'condition', 'is_uploaded_to_hood', 'created_at']
    list_filter = ['condition', 'item_mode', 'is_uploaded_to_hood', 'manufacturer', 'hood_category', 'created_at']
    search_fields = ['title', 'description', 'ean', 'mpn', 'manufacturer']
    ordering = ['-created_at']
    readonly_fields = ['created_at', 'updated_at', 'uploaded_at']
    
    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ–ª–µ–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º Hood.de API
    fieldsets = (
        ('üìã –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è (Basic Fields)', {
            'fields': (
                'title',
                'description',
                'html_description',
                'item_mode',
                'hood_category',
                'category_id',
                'quantity',
                'condition',
            ),
            'classes': ('wide',)
        }),
        
        ('üí∞ –¶–µ–Ω–æ–≤—ã–µ –ø–æ–ª—è (Price Fields)', {
            'fields': (
                'price',
                'price_start',
                'list_price',
                'purchase_price',
                'sales_tax',
            ),
            'classes': ('wide',)
        }),
        
        ('‚è∞ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–ª—è (Time Fields)', {
            'fields': (
                'start_date',
                'start_time',
                'duration_in_days',
                'auto_renew',
            ),
            'classes': ('wide',)
        }),
        
        ('üöö –ü–æ–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ (Shipping Fields)', {
            'fields': (
                'shipmethods',
                'weight',
            ),
            'classes': ('wide',)
        }),
        
        ('üí≥ –ü–æ–ª—è –æ–ø–ª–∞—Ç—ã (Payment Fields)', {
            'fields': (
                'pay_options',
            ),
            'classes': ('wide',)
        }),
        
        ('üì¶ –ü—Ä–æ–¥—É–∫—Ç–æ–≤—ã–µ –ø–æ–ª—è (Product Fields)', {
            'fields': (
                'ean',
                'isbn',
                'mpn',
                'manufacturer',
                'item_number',
                'item_number_unique_flag',
                'unit',
                'packaging_size',
                'packaging_unit',
                'minimum_purchase',
            ),
            'classes': ('wide',)
        }),
        
        ('üîÑ –ü–æ–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ (Variant Fields)', {
            'fields': (
                'product_options',
                'product_properties',
            ),
            'classes': ('wide',)
        }),
        
        ('‚≠ê –ü–æ–ª—è –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π (Feature Fields)', {
            'fields': (
                'category2_id',
                'item_name_sub_title',
                'feature_bold_title',
                'feature_background_color',
                'feature_gallery',
                'feature_category',
                'feature_home_page',
                'feature_home_page_image',
                'feature_xxl_image',
            ),
            'classes': ('wide',)
        }),
        
        ('üè™ –ü–æ–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ (Shop Fields)', {
            'fields': (
                'prod_cat_id',
                'prod_cat_id2',
                'prod_cat_id3',
                'short_desc',
                'if_is_sold_out',
                'is_approved',
                'show_on_start_page',
            ),
            'classes': ('wide',)
        }),
        
        ('üì¶ –ü–æ–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ (Delivery Fields)', {
            'fields': (
                'delivery_days_on_stock_from',
                'delivery_days_on_stock_to',
                'delivery_days_not_on_stock_from',
                'delivery_days_not_on_stock_to',
            ),
            'classes': ('wide',)
        }),
        
        ('üîí –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–æ–ª—è (Special Fields)', {
            'fields': (
                'fsk',
                'usk',
                'energy_efficiency_class',
                'energy_label_url',
                'product_info_url',
                'deficiency_description',
                'warranty_shortened_flag',
                'no_identifier_flag',
            ),
            'classes': ('wide',)
        }),
        
        ('üñºÔ∏è –ü–æ–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (Image Fields)', {
            'fields': (
                'images',
            ),
            'classes': ('wide',)
        }),
        
        ('üè∑Ô∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è', {
            'fields': (
                'material',
                'color',
                'dimensions',
            ),
            'classes': ('wide',)
        }),
        
        ('üìä –°—Ç–∞—Ç—É—Å—ã –∑–∞–≥—Ä—É–∑–∫–∏', {
            'fields': (
                'is_uploaded_to_hood',
                'hood_item_id',
                'uploaded_at',
            ),
            'classes': ('wide',)
        }),
        
        ('üîß –°–∏—Å—Ç–µ–º–Ω—ã–µ –ø–æ–ª—è', {
            'fields': (
                'custom_specifics',
                'created_by',
                'created_at',
                'updated_at',
            ),
            'classes': ('collapse',)
        }),
    )
    
    # –§–∏–ª—å—Ç—Ä—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
    list_filter = [
        'condition',
        'item_mode',
        'is_uploaded_to_hood',
        'manufacturer',
        'hood_category',
        'created_at',
        'sales_tax',
        'duration_in_days',
    ]
    
    # –ü–æ–∏—Å–∫ –ø–æ –ø–æ–ª—è–º
    search_fields = [
        'title',
        'description',
        'ean',
        'isbn',
        'mpn',
        'manufacturer',
        'item_number',
        'material',
        'color',
    ]
    
    # –î–µ–π—Å—Ç–≤–∏—è –¥–ª—è –º–∞—Å—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    actions = ['upload_to_hood', 'mark_as_uploaded', 'generate_html_descriptions']
    
    def upload_to_hood(self, request, queryset):
        """–î–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ Hood.de"""
        from .services import HoodAPIService
        
        hood_service = HoodAPIService()
        uploaded_count = 0
        error_count = 0
        
        for product in queryset:
            try:
                hood_data = product.get_hood_data()
                result = hood_service.upload_item(hood_data)
                
                if result.get('success'):
                    product.is_uploaded_to_hood = True
                    product.hood_item_id = result.get('item_id', '')
                    product.uploaded_at = timezone.now()
                    product.save()
                    uploaded_count += 1
                else:
                    error_count += 1
                    
            except Exception as e:
                error_count += 1
                continue
        
        self.message_user(
            request,
            f'–ó–∞–≥—Ä—É–∂–µ–Ω–æ: {uploaded_count}, –û—à–∏–±–æ–∫: {error_count}'
        )
    
    upload_to_hood.short_description = "–ó–∞–≥—Ä—É–∑–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –Ω–∞ Hood.de"
    
    def mark_as_uploaded(self, request, queryset):
        """–û—Ç–º–µ—Ç–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –∫–∞–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ"""
        updated = queryset.update(is_uploaded_to_hood=True)
        self.message_user(request, f'–û—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ: {updated} —Ç–æ–≤–∞—Ä–æ–≤')
    
    mark_as_uploaded.short_description = "–û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ"
    
    def generate_html_descriptions(self, request, queryset):
        """–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å HTML –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤"""
        from .utils import generate_html_description
        
        generated_count = 0
        for product in queryset:
            try:
                html_desc = generate_html_description(product)
                product.html_description = html_desc
                product.save()
                generated_count += 1
            except Exception as e:
                continue
        
        self.message_user(request, f'–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ HTML –æ–ø–∏—Å–∞–Ω–∏–π: {generated_count}')
    
    generate_html_descriptions.short_description = "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å HTML –æ–ø–∏—Å–∞–Ω–∏—è"
    
    # –ú–µ—Ç–æ–¥—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    def get_hood_data_preview(self, obj):
        """–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Hood.de"""
        hood_data = obj.get_hood_data()
        preview = []
        for key, value in list(hood_data.items())[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –ø–æ–ª–µ–π
            if value:
                preview.append(f"{key}: {value}")
        return format_html('<br>'.join(preview))
    
    get_hood_data_preview.short_description = "–î–∞–Ω–Ω—ã–µ –¥–ª—è Hood.de (–ø–µ—Ä–≤—ã–µ 10 –ø–æ–ª–µ–π)"
    
    def get_upload_status(self, obj):
        """–°—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏ —Å —Ü–≤–µ—Ç–æ–≤–æ–π –∏–Ω–¥–∏–∫–∞—Ü–∏–µ–π"""
        if obj.is_uploaded_to_hood:
            return format_html(
                '<span style="color: green;">‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω</span><br>'
                f'<small>ID: {obj.hood_item_id}</small><br>'
                f'<small>–î–∞—Ç–∞: {obj.uploaded_at}</small>'
            )
        else:
            return format_html('<span style="color: red;">‚ùå –ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω</span>')
    
    get_upload_status.short_description = "–°—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –≤ list_display
    list_display = [
        'title',
        'manufacturer',
        'price',
        'condition',
        'get_upload_status',
        'created_at'
    ]
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–æ—Ä–º
    save_on_top = True
    save_as = True
    
    # –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª–µ–π
    def save_model(self, request, obj, form, change):
        if not change:  # –ï—Å–ª–∏ —Å–æ–∑–¥–∞–µ—Ç—Å—è –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç
            obj.created_by = request.user
        super().save_model(request, obj, form, change)


@admin.register(UploadLog)
class UploadLogAdmin(admin.ModelAdmin):
    """–ê–¥–º–∏–Ω–∫–∞ –¥–ª—è –ª–æ–≥–æ–≤ –∑–∞–≥—Ä—É–∑–∫–∏"""
    list_display = ['product', 'status', 'hood_item_id', 'created_at']
    list_filter = ['status', 'created_at']
    search_fields = ['product__title', 'hood_item_id', 'error_message']
    ordering = ['-created_at']
    readonly_fields = ['created_at', 'updated_at']
    
    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('product', 'status', 'hood_item_id')
        }),
        ('–î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞', {
            'fields': ('response_data', 'error_message'),
            'classes': ('wide',)
        }),
        ('–°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('created_at', 'updated_at'),
            'classes': ('collapse',)
        }),
    )


@admin.register(BulkUpload)
class BulkUploadAdmin(admin.ModelAdmin):
    """–ê–¥–º–∏–Ω–∫–∞ –¥–ª—è –º–∞—Å—Å–æ–≤—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫"""
    list_display = ['name', 'status', 'total_products', 'uploaded_products', 'failed_products', 'created_at']
    list_filter = ['status', 'created_at']
    search_fields = ['name']
    ordering = ['-created_at']
    readonly_fields = ['created_at', 'updated_at']
    
    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('name', 'status', 'created_by')
        }),
        ('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', {
            'fields': ('total_products', 'uploaded_products', 'failed_products')
        }),
        ('–°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('created_at', 'updated_at'),
            'classes': ('collapse',)
        }),
    )
