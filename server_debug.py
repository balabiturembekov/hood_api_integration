#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ - –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ Hood API
"""

import os
import sys
import django
from django.conf import settings

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append('/home/server/hood_api_integration')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'hood_integration_service.settings')
django.setup()

from products.services import HoodAPIService
from products.models import Product
import xml.etree.ElementTree as ET

def debug_api_response():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ—Ç–≤–µ—Ç–∞ API –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"""
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê HOOD API –û–¢–í–ï–¢–ê –ù–ê –°–ï–†–í–ï–†–ï")
    print("=" * 60)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    try:
        product = Product.objects.first()
        if not product:
            print("‚ùå –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return
        
        print(f"üì¶ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä: {product.title}")
        print(f"üÜî ID —Ç–æ–≤–∞—Ä–∞: {product.id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
        hood_data = product.get_hood_data()
        print(f"üìã –î–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏: {len(hood_data)} –ø–æ–ª–µ–π")
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å
        hood_service = HoodAPIService()
        
        # –°–æ–∑–¥–∞–µ–º XML –∑–∞–ø—Ä–æ—Å
        xml_request = hood_service._build_xml_request('itemInsert', [hood_data])
        print(f"üì§ XML –∑–∞–ø—Ä–æ—Å (–ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤):")
        print(xml_request[:500] + "..." if len(xml_request) > 500 else xml_request)
        print()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
        print("üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API...")
        response = hood_service.session.post(
            hood_service.api_url,
            data=xml_request,
            headers={'Content-Type': 'text/xml; charset=UTF-8'},
            timeout=30
        )
        
        print(f"üì• –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        print(f"üì• –ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: {dict(response.headers)}")
        print()
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        print("üîç –ê–ù–ê–õ–ò–ó –û–¢–í–ï–¢–ê:")
        print("=" * 30)
        
        response_text = response.text
        print(f"üìÑ –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: {len(response_text)} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"üìÑ –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç:")
        print(response_text)
        print()
        
        # –ü–∞—Ä—Å–∏–º XML
        try:
            root = ET.fromstring(response_text)
            print(f"‚úÖ XML —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω")
            print(f"üè∑Ô∏è –ö–æ—Ä–Ω–µ–≤–æ–π —ç–ª–µ–º–µ–Ω—Ç: {root.tag}")
            print(f"üè∑Ô∏è –ê—Ç—Ä–∏–±—É—Ç—ã –∫–æ—Ä–Ω–µ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞: {root.attrib}")
            print()
            
            # –ò—â–µ–º response
            response_container = None
            if root.tag == 'response':
                response_container = root
                print("‚úÖ –ù–∞–π–¥–µ–Ω –∫–æ—Ä–Ω–µ–≤–æ–π —ç–ª–µ–º–µ–Ω—Ç 'response'")
            else:
                response_container = root.find('.//response')
                if response_container is not None:
                    print("‚úÖ –ù–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç 'response' –≤–Ω—É—Ç—Ä–∏ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ")
                else:
                    print("‚ùå –≠–ª–µ–º–µ–Ω—Ç 'response' –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            if response_container is not None:
                print(f"üè∑Ô∏è –ê—Ç—Ä–∏–±—É—Ç—ã response: {response_container.attrib}")
                
                # –ò—â–µ–º items
                items_container = response_container.find('items')
                if items_container is not None:
                    print("‚úÖ –ù–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç 'items'")
                    item_container = items_container.find('item')
                    if item_container is not None:
                        print("‚úÖ –ù–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç 'item' –≤–Ω—É—Ç—Ä–∏ 'items'")
                    else:
                        print("‚ùå –≠–ª–µ–º–µ–Ω—Ç 'item' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤–Ω—É—Ç—Ä–∏ 'items'")
                else:
                    print("‚ùå –≠–ª–µ–º–µ–Ω—Ç 'items' –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    # –ò—â–µ–º item –Ω–∞–ø—Ä—è–º—É—é
                    item_container = response_container.find('item')
                    if item_container is not None:
                        print("‚úÖ –ù–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç 'item' –Ω–∞–ø—Ä—è–º—É—é –≤ response")
                    else:
                        print("‚ùå –≠–ª–µ–º–µ–Ω—Ç 'item' –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏–≥–¥–µ")
                
                # –í—ã–≤–æ–¥–∏–º –≤—Å–µ –¥–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã response
                print(f"üìã –í—Å–µ –¥–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã response:")
                for child in response_container:
                    print(f"  - {child.tag}: {child.text[:100] if child.text else 'None'}")
            
            # –ò—â–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏
            global_error = root.find('.//globalError')
            if global_error is not None:
                print(f"‚ùå –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {global_error.text}")
            
            # –ò—â–µ–º –¥—Ä—É–≥–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            possible_elements = ['error', 'message', 'status', 'itemID', 'referenceID']
            for elem_name in possible_elements:
                elem = root.find(f'.//{elem_name}')
                if elem is not None:
                    print(f"üîç –ù–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç '{elem_name}': {elem.text}")
            
        except ET.ParseError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ XML: {e}")
            print(f"üìÑ –û—Ç–≤–µ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º XML")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é upload_item
        print("\nüß™ –¢–ï–°–¢ –§–£–ù–ö–¶–ò–ò upload_item:")
        print("=" * 40)
        result = hood_service.upload_item(hood_data)
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:")
        print(f"  ‚úÖ –£—Å–ø–µ—Ö: {result.get('success', False)}")
        print(f"  üÜî Item ID: {result.get('item_id', '–ù–µ –Ω–∞–π–¥–µ–Ω')}")
        print(f"  üìù –°—Ç–∞—Ç—É—Å: {result.get('status', '–ù–µ –Ω–∞–π–¥–µ–Ω')}")
        print(f"  üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {result.get('cost', '–ù–µ –Ω–∞–π–¥–µ–Ω–∞')}")
        print(f"  ‚ùå –û—à–∏–±–∫–∞: {result.get('error', '–ù–µ—Ç –æ—à–∏–±–æ–∫')}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    debug_api_response()
